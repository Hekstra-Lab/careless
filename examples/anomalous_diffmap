#!/usr/bin/env python

import reciprocalspaceship as rs
import numpy as np
from argparse import ArgumentParser


parser = ArgumentParser()

parser.add_argument(
    'anom_mtz',
    type=str,
    help = "Mtz with anomalous structure factors.",
  )

parser.add_argument(
    'phase_mtz',
    type=str,
    help='Mtz with reference phases to use.',
  )

parser.add_argument(
    'out_mtz',
    type=str,
    help='output filename',
  )

parser.add_argument(
    '-p',
    type=str,
    help='Phase key: by default the first phase dtype key will be used.',
    default=None,
)

parser.add_argument(
    '-f',
    type=str,
    help='Structure factor key base. Defaults to "F".',
    default='F',
)

parser.add_argument(
    '--embed',
    action='store_true',
    default=False,
  )

parser = parser.parse_args()

anom  = rs.read_mtz(parser.anom_mtz)
phase = rs.read_mtz(parser.phase_mtz)

if 'N(+)' in anom:
    anom = anom[anom['N(+)'] > 0]
if 'N(-)' in anom:
    anom = anom[anom['N(-)'] > 0]


phase_key = parser.p
if phase_key is None:
  phase_key = phase.dtypes[phase.dtypes=='P'].keys()[0]

if 'Sig' + parser.f + '(+)' in anom:
    sig = 'Sig'
elif 'SIG' + parser.f + '(+)' in anom:
    sig = 'SIG'


out = rs.DataSet({
    'F' : 0.5*(anom[parser.f + '(+)'] + anom[parser.f + '(-)']).astype('F'),
    'SIGF' : (anom[sig + parser.f + '(+)']**2. + anom[sig + parser.f + '(-)']**2.)**0.5,
    'ANOM' : anom[parser.f + '(+)'] - anom[parser.f + '(-)'].astype('F'),
    'SIGANOM' : (anom[sig + parser.f + '(+)']**2. + anom[sig + parser.f + '(-)']**2.)**0.5,
}, cell=anom.cell, spacegroup=anom.spacegroup)

out['WANOM'] = ((1 + out['SIGANOM']/out['SIGANOM'].mean())**-1.).astype('W')

out['PHIFMODEL'] = phase.loc[out.index, phase_key]
out['PHANOM'] = out[phase_key] - 90. - 180.*(out['ANOM'] >= 0.)
out.infer_mtz_dtypes(inplace=True)
out['ANOM'] = out['ANOM'].astype("F")

out.write_mtz(parser.out_mtz)

if parser.embed:
    from matplotlib import pyplot as plt
    plt.errorbar(
        anom[parser.f + '(+)'],
        anom[parser.f + '(-)'],
        xerr = anom[sig + parser.f + '(+)'],
        yerr = anom[sig + parser.f + '(-)'],
        ls = 'none',
        color = 'k',
        alpha = 0.2,
    )
    plt.semilogx()
    plt.semilogy()
    plt.grid(which='both')
    plt.xlabel(parser.f + '(+)')
    plt.ylabel(parser.f + '(-)')
    plt.plot(plt.xlim(), plt.xlim(), '--r', scalex=False, scaley=False)

    plt.figure()
    plt.hist(out['ANOM'], 100, color='k')
    plt.xlabel(r"$\Delta_{anom}$")

    nbins = 20
    out.compute_dHKL(inplace=True)
    bins = np.percentile(out.dHKL, np.linspace(100, 0, nbins + 1))
    bins = np.vstack((bins[:-1], bins[1:]))

    mean_isigi = []
    median_isigi = []
    ticks = []
    from tqdm import tqdm
    for binnumber, (i,j) in tqdm(enumerate(zip(*bins))):
        idx = (out.dHKL >= j) & (out.dHKL <= i)
        mean_isigi.append((np.abs(out[idx]['ANOM']) / out[idx]['SIGANOM']).mean())
        median_isigi.append((np.abs(out[idx]['ANOM']) / out[idx]['SIGANOM']).median())
        ticks.append(f'{i:0.2f}-{j:0.2f}')

    plt.figure()
    plt.plot(mean_isigi, '-k', label='Mean')
    plt.plot(median_isigi, '--k', label='Median')
    plt.legend()
    plt.title(r"Signal to Noise by Resolution Bin ")
    plt.ylabel(r"$<|\Delta F |/ \sigma_{\Delta F}>$")
    plt.xticks(np.arange(nbins), ticks, rotation=45, ha='right')
    plt.xlabel(r"$Resolution\ (\AA)$")
    plt.tight_layout()

    from IPython import embed
    embed(colors='neutral')
